[build-system]
requires = [
  "setuptools>=45",
  "setuptools_scm[toml]>=4.1.2",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/boost_histogram/version.py"

[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "xunit2"
addopts = [
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
  "--import-mode=importlib",
]
filterwarnings = ["error"]
xfail_strict = true
testpaths = ["tests"]
required_plugins = ["pytest-benchmark"]
log_cli_level = "DEBUG"

[tool.mypy]
python_version = "3.8"
files = ["src"]
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = ["matplotlib.*", "typer"]
ignore_missing_imports = true

[tool.check-manifest]
ignore = [
  ".all-contributorsrc",
  ".clang-format",
  ".cmake-format.yaml",
  ".pre-commit-config.yaml",
  ".pre-commit-nodocker.yaml",
  ".readthedocs.yml",
  ".clang-tidy",
  "examples/**",
  "notebooks/**",
  "docs/**",
  "scripts/**",
  "dev-requirements.txt",
  "extern/**/*.py",
  "extern/**/*.md",
  "extern/**/*.rst",
  "extern/**/*.toml",
  "extern/*/checks/**",
  "extern/*/test/**",
  "extern/*/benchmark/**",
  "extern/*/doc/**",
  "extern/*/examples/**",
  "extern/*/tools/**",
  "extern/pybind11/docs/**",
  "extern/pybind11/tests/**",
  "CMakeLists.txt",
  "extern/*/README.md",
  "CONTRIBUTING.md",
  "Jamfile",
  "configure",
  "*.clang_complete",
  "*.html",
  "*.in",
  "*.json",
  "*.yml",
  "src/boost_histogram/_core.*",
  "src/boost_histogram/version.py",
  "tests/.pytest_cache/**",
]

[tool.cibuildwheel]
test-extras = "test"
test-command = "pytest --benchmark-disable {project}/tests"
test-skip = [
  "pp*",  # requires correct version to get binary
  "*universal2:arm64",
  "*musllinux*",
  "cp312-win_amd64", # NumPy segfaults
]
skip = ["pp*-manylinux_i686", "cp312-win32"] # not supported by NumPy
environment-pass = ["SETUPTOOLS_SCM_PRETEND_VERSION"]
environment = { PIP_ONLY_BINARY = "numpy" }

[tool.pylint]
main.py-version = "3.7"
main.extension-pkg-allow-list = ["boost_histogram._core"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "cyclic-import", # TODO: move files out of _internal
  "fixme",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-member", # C extensions mess with this
  "protected-access",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-lines",
  "too-many-locals",
  "too-many-return-statements",
  "too-many-statements",
  "wrong-import-position",
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT011", "PT013"
]
target-version = "py37"
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
typing-modules = ["boost_histogram._internal.typing"]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]


[tool.ruff.mccabe]
max-complexity = 13

[tool.ruff.per-file-ignores]
"docs/*" = ["T20"]
"examples/*" = ["T20"]
"scripts/*" = ["T20"]
"setup_helpers.py" = ["C901"]
"setup.py" = ["T20"]
"tests/*" = ["T20"]
"notebooks/*" = ["T20"]
"*.pyi" = ["F401", "F811", "ARG001"]
"docs/conf.py" = ["E402", "ARG001"]
