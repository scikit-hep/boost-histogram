[build-system]
requires = ["scikit-build-core>=0.10", "pybind11>=2.13.3"]
build-backend = "scikit_build_core.build"

[project]
name = "boost-histogram"
dynamic = ["version"]
description = "The Boost::Histogram Python wrapper."
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Hans Dembinski", email = "hans.dembinski@gmail.com" },
    { name = "Henry Schreiner", email = "hschrein@cern.ch" },
]
keywords = [
    "boost-histogram",
    "histogram",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "numpy",
]

[project.optional-dependencies]
dev = [
    "cloudpickle",
    "hypothesis>=6.0",
    "ipykernel",
    "pytest-benchmark",
    "pytest>=6.0",
    "typer",
]
docs = [
    "myst_parser>=0.13",
    "nbsphinx",
    "sphinx-book-theme>=0.0.33",
    "Sphinx>=4.0",
    "sphinx_copybutton",
]
examples = [
    "matplotlib",
    "netCDF4",
    "numba",
    "uproot3",
    "xarray",
    "xhistogram",
]
test = [
    "cloudpickle",
    "hypothesis>=6.0",
    "pytest-benchmark",
    "pytest>=6.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/scikit-hep/boost-histogram/issues"
Changelog = "https://boost-histogram.readthedocs.io/en/latest/CHANGELOG.html"
Chat = " https://gitter.im/HSF/PyHEP-histogramming"
Discussions = "https://github.com/scikit-hep/boost-histogram/discussions"
Documentation = "https://boost-histogram.readthedocs.io/"
Homepage = "https://github.com/scikit-hep/boost-histogram"


[tool.scikit-build]
minimum-version = "build-system.requires"
cmake.version = "CMakeLists.txt"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.exclude = [
  "extern/**/*.py",
  "extern/**/*.md",
  "extern/**/*.rst",
  "extern/**/*.toml",
  "extern/*/checks/**",
  "extern/*/test/**",
  "extern/*/benchmark/**",
  "extern/*/doc/**",
  "extern/*/examples/**",
  "extern/*/tools/**",
  "extern/pybind11/docs/**",
  "extern/pybind11/tests/**",
  "extern/*/README.md",
]


[[tool.scikit-build.generate]]
path = "boost_histogram/version.py"
template = '''
__version__ = version = "$version"
'''


[tool.setuptools_scm]


[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "xunit2"
addopts = [
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
  "--import-mode=importlib",
]
filterwarnings = [
  "error",
  "default:could not create cache path:pytest.PytestCacheWarning",
]
xfail_strict = true
testpaths = ["tests"]
required_plugins = ["pytest-benchmark"]
log_cli_level = "DEBUG"

[tool.mypy]
python_version = "3.8"
files = ["src"]
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = ["matplotlib.*", "typer"]
ignore_missing_imports = true


[tool.cibuildwheel]
build-frontend = "build[uv]"
test-extras = "test"
test-command = "pytest --benchmark-disable {project}/tests"
skip = [
  "pp38-*",
]
test-skip = [
  "cp*-musllinux_*", # Segfaults
  "cp313t-*win*",
]
free-threaded-support = true
environment-pass = ["SETUPTOOLS_SCM_PRETEND_VERSION"]
environment.PIP_ONLY_BINARY = "numpy"
environment.PIP_PREFER_BINARY = "1"

[[tool.cibuildwheel.overrides]]
select = "*pyodide*"
inherit.environment = "append"
build-frontend = {name = "build", args = ["--exports", "whole_archive"]}

[[tool.cibuildwheel.overrides]]
select = "pp310-macosx_arm64"
environment.MACOSX_DEPLOYMENT_TARGET = "14.0"


[tool.pylint]
py-version = "3.8"
ignore-patterns = ['.*\.pyi']
extension-pkg-allow-list = ["boost_histogram._core"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "cyclic-import", # TODO: move files out of _internal
  "fixme",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "c-extension-no-member", # C extensions mess with this
  "protected-access",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-lines",
  "too-many-locals",
  "too-many-return-statements",
  "too-many-statements",
  "wrong-import-position",
]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "PLR09",          # Too many X
  "PLR2004",        # Magic value in comparison
  "E501",           # Line too long
  "PT011", "PT013", # Incorrect pytest codes
  "ISC001",         # Conflicts with the formatter
]
typing-modules = ["boost_histogram._internal.typing"]
isort.required-imports = ["from __future__ import annotations"]


[tool.ruff.lint.mccabe]
max-complexity = 13

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["T20"]
"examples/*" = ["T20"]
"scripts/*" = ["T20"]
"setup_helpers.py" = ["C901"]
"setup.py" = ["T20"]
"tests/*" = ["T20"]
"notebooks/*" = ["T20"]
"*.pyi" = ["F401", "F811", "ARG001"]
"docs/conf.py" = ["E402", "ARG001"]
# Several of these will be fixed in the next Ruff release
# F401 is needed since Ruff doesn't realise some magics are code
"**.ipynb" = ["E703", "I002", "E731", "B015", "B018", "F401"]
