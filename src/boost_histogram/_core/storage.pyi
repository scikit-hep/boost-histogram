from __future__ import annotations

from typing import Any, TypeVar

T = TypeVar("T", bound="_BaseStorage")

class _BaseStorage:
    def __init__(self) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __copy__(self: T) -> T: ...
    def __deepcopy__(self: T, memo: Any) -> T: ...

class int64(_BaseStorage): ...
class double(_BaseStorage): ...
class atomic_int64(_BaseStorage): ...
class unlimited(_BaseStorage): ...
class weight(_BaseStorage): ...
class mean(_BaseStorage): ...
class weighted_mean(_BaseStorage): ...
